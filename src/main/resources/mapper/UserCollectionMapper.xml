<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="wpy.personal.novel.novel.novel.mapper.UserCollectionMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="wpy.personal.novel.pojo.entity.UserCollection">
        <id column="collection_id" property="collectionId" />
        <result column="collection_type" property="collectionType" />
        <result column="catalog_name" property="catalogName" />
        <result column="parent_id" property="parentId" />
        <result column="volume_id" property="volumeId" />
        <result column="novel_id" property="novelId" />
        <result column="create_time" property="createTime" />
        <result column="create_by" property="createBy" />
        <result column="update_time" property="updateTime" />
        <result column="update_by" property="updateBy" />
        <result column="is_delete" property="isDelete" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        collection_id, collection_type, catalog_name, parent_id, volume_id, novel_id, create_time, create_by, update_time, update_by, is_delete
    </sql>
    <select id="selectCollections" resultType="wpy.personal.novel.pojo.bo.CollectionBo">
        SELECT
            uc.collection_id AS collectionId,
            uc.collection_type AS collectionType,
            uc.catalog_name AS catalogName,
            uc.parent_id AS parentId,
            uc.volume_id AS volumeId,
            uc.novel_id AS novelId,
            uc.create_time AS createTime,
            uc.create_by AS createBy,
            uc.update_time AS updateTime,
            uc.update_by AS updateBy,
            uc.is_delete AS isDelete,
            n.novel_name AS novelName,
            n.novel_img AS novelImg,
            nv.volume_name AS volumeName,
            nv.volume_img AS volumeImg
        FROM `user_collection` uc
        left join novel n on n.novel_id = uc.novel_id
        left join novel_volume nv on nv.volume_id = uc.volume_id
        <trim prefix="where" prefixOverrides="and">
            <if test="user.userId != null and user.userId != ''">
                and uc.create_by = #{user.userId}
            </if>
            <if test="dto.parentId != null and dto.parentId != ''">
                and uc.parent_id = #{dto.parentId}
            </if>
            <if test="dto.parentId == null or dto.parentId == ''">
                and (uc.parent_id = '' or uc.parent_id is null)
            </if>
            <if test="dto.catalogName != null and dto.catalogName != ''">
                and (uc.catalog_name like concat('%',#{dto.catalogName},'%')
                    or n.novel_name like concat('%',#{dto.catalogName},'%')
                    or nv.volume_name like concat('%',#{dto.catalogName},'%'))
            </if>
            <if test="dto.typeList != null and dto.typeList.size()>0">
                and uc.collection_type in
                <foreach collection="dto.typeList" open="(" close=")" separator="," item="type">
                    #{type}
                </foreach>
            </if>
        </trim>
    </select>
    <select id="getAllCollectionCatalog" resultType="wpy.personal.novel.pojo.entity.UserCollection">
        SELECT
            uc.collection_id AS collectionId,
            uc.collection_type AS collectionType,
            uc.catalog_name AS catalogName,
            uc.parent_id AS parentId,
            uc.volume_id AS volumeId,
            uc.novel_id AS novelId,
            uc.create_time AS createTime,
            uc.create_by AS createBy,
            uc.update_time AS updateTime,
            uc.update_by AS updateBy,
            uc.is_delete AS isDelete
        FROM `user_collection` uc
        <where>
            uc.create_by = #{userId}
            and uc.is_delete = '0'
            <if test="parentId != null and parentId != ''">
                and uc.parent_id = #{parentId}
            </if>
        </where>
    </select>
    <select id="list" resultType="wpy.personal.novel.pojo.bo.CollectionTableBo">
        SELECT
            uc.collection_id AS collectionId,
            uc.collection_type AS collectionType,
            uc.catalog_name AS name,
            uc.parent_id AS parentId,
            uc.volume_id AS volumeId,
            uc.novel_id AS novelId,
            uc.create_time AS createTime,
            uc.create_by AS createBy,
            uc.update_time AS updateTime,
            uc.update_by AS updateBy,
            uc.is_delete AS isDelete,
            n.novel_name AS novelName,
            n.novel_img AS novelImg,
            nv.volume_name AS volumeName,
            nv.volume_img AS volumeImg,
            su.user_name AS createByName,
            uc2.catalog_name AS parentName
        FROM `user_collection` uc
        left join novel n on n.novel_id = uc.novel_id
        left join novel_volume nv on nv.volume_id = uc.volume_id
        left join sys_user su on su.user_id = uc.create_by
        left join user_collection uc2 on uc2.collection_id = uc.parent_id
        <where>
            <if test="user.userId != null and user.userId != ''">
                and uc.create_by = #{user.userId}
            </if>
            <if test="dto.catalogName != null and dto.catalogName != ''">
                and (uc.catalog_name like concat('%',#{dto.catalogName},'%')
                or n.novel_name like concat('%',#{dto.catalogName},'%')
                or nv.volume_name like concat('%',#{dto.catalogName},'%'))
            </if>
            <if test="dto.createByName != null and dto.createByName != ''">
                and su.user_name = #{dto.createByName}
            </if>
            <if test="dto.collectionType != null and dto.collectionType != ''">
                and uc.collection_type = #{dto.collectionType}
            </if>
        </where>
        order by uc.create_time desc
    </select>

</mapper>
